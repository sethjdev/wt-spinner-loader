{"version":3,"sources":["components/spinner/Spinner.module.css","components/loader-container/LoaderContainer.module.css","components/button/Button.module.css","components/button/Button.js","hooks/useInterval.js","components/document-title/DocumentTitle.js","consts.js","helpers/renderStatusText.js","components/spinner/Spinner.js","components/loader-container/LoaderContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","label","onClick","disabled","className","style","wrapper","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","DocumentTitle","title","Helmet","renderDocumentTitle","started","progress","complete","consts","Spinner","props","spinSvgRef","strokeDasharray","Math","round","PI","strokeDashoffset","animationPlayState","styles","spinAnim","viewBox","xmlns","ref","cx","cy","r","circleWidth","circleBg","circleTrack","innerCircleWrapper","percentInnerWrapper","percentText","percentUnit","completeWrapper","defaultProps","LoaderContainer","useState","setStarted","setProgress","renderStatusText","loaderWrapper","controlsWrapper","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f2a49e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Spinner_wrapper__1AM7v\",\"circleBg\":\"Spinner_circleBg__3rKql\",\"spinAnim\":\"Spinner_spinAnim__GcnuU\",\"spin\":\"Spinner_spin__2NPaS\",\"circleTrack\":\"Spinner_circleTrack__3N044\",\"innerCircleWrapper\":\"Spinner_innerCircleWrapper__2z8Gi\",\"percentInnerWrapper\":\"Spinner_percentInnerWrapper__3VUbH\",\"complete\":\"Spinner_complete__3rNcP\",\"fadeOut\":\"Spinner_fadeOut__2YFkT\",\"percentText\":\"Spinner_percentText__JLlzq\",\"percentUnit\":\"Spinner_percentUnit__sLYKC\",\"completeWrapper\":\"Spinner_completeWrapper__-eQd5\",\"completeAnim\":\"Spinner_completeAnim__QJAG-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LoaderContainer_wrapper__1o27h\",\"loaderWrapper\":\"LoaderContainer_loaderWrapper__2eN-j\",\"controlsWrapper\":\"LoaderContainer_controlsWrapper__1F_CU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Button_wrapper__1oiSI\"};","import React from \"react\";\nimport style from \"./Button.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction Button({ label, onClick, disabled }) {\n  return (\n    <button className={style.wrapper} onClick={onClick} disabled={disabled}>\n      {label}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string,\n  disabled: PropTypes.bool\n};\n\nexport default Button;\n","// useInterval hook by Dan Abramov\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useRef, useEffect } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nfunction DocumentTitle({ title }) {\n  return (\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n  );\n}\n\nDocumentTitle.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default DocumentTitle;\n","export default {\n  UPLOAD_COMPLETE: \"Upload Complete!\",\n  UPLOADING: \"Uploading!\",\n  RESUME_UPLOAD: \"Resume Upload!\",\n  READY_TO_UPLOAD: \"Ready to Upload!\",\n};\n","import consts from \"../consts\";\n\nfunction renderDocumentTitle(started, progress, complete) {\n  if (complete) return consts.UPLOAD_COMPLETE;\n  if (started) return consts.UPLOADING;\n  if (progress < 100 && progress > 0) return consts.RESUME_UPLOAD;\n  return consts.READY_TO_UPLOAD;\n}\n\nexport default renderDocumentTitle","import React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Spinner.module.css\";\n\nfunction Spinner(props) {\n  const { started, progress, complete } = props;\n  const spinSvgRef = useRef(null);\n  const circleWidth = 50;\n\n  const strokeDasharray = Math.round(Math.PI * (2 * circleWidth) - 30);\n  let strokeDashoffset = Math.round(((100 - progress) / 100) * strokeDasharray);\n\n  if (!!spinSvgRef.current) {\n    if (started) {\n      spinSvgRef.current.style.animationPlayState = \"running\";\n    } else {\n      spinSvgRef.current.style.animationPlayState = \"paused\";\n    }\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {/* SPINNER CIRCLES */}\n      <svg\n        className={styles.spinAnim}\n        viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        ref={spinSvgRef}\n      >\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r={circleWidth - 5}\n          style={{\n            strokeDasharray,\n            strokeDashoffset,\n          }}\n        />\n      </svg>\n      <svg\n        viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className={styles.circleBg}\n      >\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r={circleWidth - 5}\n          className={styles.circleTrack}\n        />\n      </svg>\n\n      {/* STATUS TEXT */}\n      <div className={`${styles.innerCircleWrapper}`}>\n        <div className={`${styles.percentInnerWrapper} ${complete ? styles.complete : \"\"}`}>\n          <span className={styles.percentText}>{progress}</span>\n          <span className={styles.percentUnit}>%</span>\n        </div>\n        {complete && (\n          <div className={styles.completeWrapper}>\n            <p>UPLOAD COMPLETE!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nSpinner.defaultProps = {\n  started: false,\n  progress: 0,\n  complete: false,\n};\n\nSpinner.propTypes = {\n  started: PropTypes.bool,\n  progress: PropTypes.number,\n  complete: PropTypes.bool,\n};\n\nexport default Spinner;\n","import React, { useState } from \"react\";\nimport styles from \"./LoaderContainer.module.css\";\nimport Button from \"../button/Button\";\nimport useInterval from \"../../hooks/useInterval\";\nimport DocumentTitle from \"../../components/document-title/DocumentTitle\";\nimport renderStatusText from \"../../helpers/renderStatusText\";\nimport Spinner from \"../spinner/Spinner\";\n\nfunction LoaderContainer() {\n  \n  const [started, setStarted] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  useInterval(\n    () => {\n      if (progress < 100) {\n        setProgress(progress + 1);\n      } else {\n        setStarted(false);\n      }\n    },\n    // passing null for the delay value pauses interval\n    started ? 100 : null\n  );\n\n  const complete = !started && progress === 100;\n\n  return (\n    <>\n      <DocumentTitle title={renderStatusText(started, progress, complete)} />\n      <div className={styles.wrapper}>\n        <div className={styles.loaderWrapper}>\n          <Spinner \n            started={started} \n            progress={progress} \n            complete={complete} \n          />\n        </div>\n        <div className={styles.controlsWrapper}>\n          <Button\n            label={\"Start\"}\n            onClick={() => setStarted(true)}\n            disabled={started || complete}\n          />\n          <Button\n            label={\"Stop\"}\n            onClick={() => setStarted(false)}\n            disabled={!started}\n          />\n          <Button\n            label={\"Reset\"}\n            onClick={() => setProgress(0)}\n            disabled={progress === 0}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default LoaderContainer;\n","import React from \"react\";\nimport LoaderContainer from \"./components/loader-container/LoaderContainer\";\nimport \"./App.css\";\n\nexport default (props) => {\n  return (\n    <div className=\"app-wrapper\">\n      <LoaderContainer />\n      <p className=\"copyright\"><a href=\"https://github.com/sethjdev/wt-spinner-loader\">WeTransfer Technical Assessment</a> - &copy; 2020 <a href=\"mailto:seth.johnson0126@gmail.com\">Seth Johnson</a></p>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}